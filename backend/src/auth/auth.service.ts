import { Injectable, UnauthorizedException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { UsuarioService } from '../usuario/usuario.service';
import * as bcrypt from 'bcrypt';

@Injectable()
export class AuthService {
  constructor(
    private readonly usuarioService: UsuarioService,
    private readonly jwtService: JwtService,
  ) {}

  // Fun√ß√£o de valida√ß√£o de usu√°rio (com a senha e role)
  async validateUser(email: string, senha: string): Promise<{ id: number; email: string; role: string } | null> {
    console.log(`üîç Buscando usu√°rio com email: ${email}`);
    const user = await this.usuarioService.findByEmail(email);

    // Se o usu√°rio n√£o for encontrado, lan√ßa uma exce√ß√£o
    if (!user) {
      console.log('‚ùå Usu√°rio n√£o encontrado.');
      throw new UnauthorizedException('Credenciais inv√°lidas.');
    }

    console.log(`‚úÖ Usu√°rio encontrado: ${user.email}`);
    console.log(`üîê Senha armazenada no banco: ${user.senha}`);
    console.log(`üîë Senha digitada pelo usu√°rio: ${senha}`);

    // Verifica se a senha est√° criptografada corretamente
    if (!user.senha || !user.senha.startsWith('$2b$')) {
      console.log('‚ùå Senha n√£o est√° criptografada corretamente.');
      throw new UnauthorizedException('Erro interno na autentica√ß√£o.');
    }

    // Comparando a senha digitada com a armazenada
    console.log('üõ†Ô∏è Testando bcrypt.compare()...');
    const isPasswordValid = await bcrypt.compare(senha, user.senha);
    console.log(`üîç Resultado de bcrypt.compare(): ${isPasswordValid ? '‚úÖ Senha correta' : '‚ùå Senha inv√°lida'}`);

    // Caso a senha n√£o seja v√°lida
    if (!isPasswordValid) {
      console.log('‚ùå Senha inv√°lida.');
      throw new UnauthorizedException('Credenciais inv√°lidas.');
    }

    console.log('‚úÖ Senha correta. Login autorizado.');

    // Retorna o usu√°rio com o role, que ser√° usado no login
    return {
      id: user.id,
      email: user.email,
      role: user.role,  // Garantir que o role do usu√°rio seja retornado
    };
  }

  // Fun√ß√£o para gerar o token JWT e retornar junto com o role do usu√°rio
  async login(user: { id: number; email: string; role: string }): Promise<{ access_token: string; role: string }> {
    // Gerando o payload com id, email e role
    const payload = { id: user.id, email: user.email, role: user.role };

    // Gerando o token com o payload
    const access_token = this.jwtService.sign(payload);
    
    // Retorna o token e o role
    return {
      access_token,
      role: user.role,  // Incluindo o role na resposta do login
    };
  }
}
